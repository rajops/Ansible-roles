---
# Variable setup.
- name: Change hostname
  hostname: name=jenkins 


- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ __jenkins_pkg_url }}"
  when: jenkins_pkg_url is not defined

# Setup/install tasks.
- name: Ensure dependencies are installed.
  apt: name=curl state=installed

#- name: Install git
#  apt: name=git state=installed

- name: Install python-jenkins
  apt: name=python-jenkins state=installed

- name: Install python-lxml
  apt: name=python-lxml state=installed 

- name: Add Jenkins apt repository key.
  apt_key: url={{ jenkins_repo_key_url }} state=present

- name: Add Jenkins apt repository.
  apt_repository: repo={{ jenkins_repo_url }} state=present update_cache=yes

- name: Download specific Jenkins version.
  get_url:
    url: "{{ jenkins_pkg_url }}/jenkins_{{ jenkins_version }}_all.deb"
    dest: "/tmp/jenkins.deb"
  when: jenkins_version is defined

- name: Check if we downloaded a specific version of Jenkins.
  stat: path="/tmp/jenkins.deb"
  register: specific_version

- name: Install our specific version of Jenkins.
  apt:
    deb: "/tmp/jenkins.deb"
    state: installed
  when: specific_version.stat.exists
  notify: configure default users

- name: Validate Jenkins is installed and register package name.
  apt: name=jenkins state=present
  notify: configure default users

# Configure Jenkins init settings.
- include: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent

# Update Jenkins and install configured plugins.
- include: plugins.yml

#
#- copy:
#    src: /home/vagrant/Jenkins/Tataproj/templates/create-seed-job.groovy
#    dest: /var/lib/jenkins/init.groovy.d

- template:
    src: create-seed-job.groovy.j2
    dest: /var/lib/jenkins/init.groovy.d/create-seed-job.groovy

- template:
    src: org.jenkinsci.plugins.ghprb.GhprbTrigger.xml.j2
    dest: /var/lib/jenkins/org.jenkinsci.plugins.ghprb.GhprbTrigger.xml


#- name: Credentials
#  command: curl -X POST 'http://admin:admin@192.168.0.21:8080/credentials/store/system/domain/_/createCredentials' \
#          --data-urlencode 'json={"": "0","credentials": {  "scope": "GLOBAL",  "id": "identification1",  "username": "new",  "password": "new","description": "linda","$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"}}' 
  
#- copy:
#    src: /home/vagrant/Jenkins/Mettl/jenkins/templates/AdminCassandraManager.groovy
#    dest: /var/lib/jenkins/init.groovy.d

- template:
    src: credentials.xml.j2
    dest: /var/lib/jenkins/credentials.xml
#- name: Create Jenkins Credential
#  uri:
#    url: http://admin:admin@192.168.0.21:8080/credentials/store/system/domain/_/createCredentials
#    method: POST
#    body: "name=username&password=password&scope=GLOBAL&id=identication3"    
#    body: "{": "0","credentials": {"scope": "GLOBAL","id": "identification1","username": "new","password": "new","description": "linda","$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"}}""
#    body_format: json
#    headers:
#      Content-Type: "application/x-www-form-urlencoded"
#    register: login

- template:
    src: credentials.sh.j2
    dest: /tmp/credentials.sh
    mode: 0755

- command: sh /tmp/credentials.sh

- template:
    src: hudson.tasks.Maven.xml.j2
    dest: /var/lib/jenkins/hudson.tasks.Maven.xml


#- name: security disable
#  lineinfile: dest=/var/lib/jenkins/config.xml regexp="^* \<disableRememberMe>" line="<disableRememberMe>true</disableRememberMe>" state=present  

